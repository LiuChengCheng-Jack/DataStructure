#include<iostream>
using namespace std;
template<class T>
void InsertionSort(T Date[], int n)//直接插入排序
{
	int p, i;
	for ( p = 1; p < n; p++)//进行n-1趟插入
	{
		T temp = Date[p];
		i = p - 1;
		while (i>=0&&Date[i]>temp)//寻找插入位置
		{
			Date[i + 1] = Date[i];
			i--;
		}
		Date[i + 1] = temp;
	}
}
template<class T>//折半插入查找算法
void BinaryInsertionSort(T Date[], int n)//参数为带排序元素及其个数
{
	int left, mid, right, p;
	for ( p = 1; p < n; p++)
	{
		T temp = Date[p];
		left = 0;
		right = p - 1;
		while (left <= right)
		{
			mid = (left + right) / 2;
			if (Date[mid]>temp)
			{
				right = mid - 1;
			}
			else
				left = mid + 1;
		}
		for (int i = p-1; i >=left; i--)
		{
			Date[i + 1] = Date[i];
		}
		Date[left] = temp;
	}
}
template<class T>
void BubbleSort(T Date[],int n)//冒泡排序算法
{
	int flag = 0;//标记是否发生了交换
	for (int i = 0; i < n; i++)//控制排序的每一趟
	{
		flag = 0;
		for (int j = 0; j < n-i; j++)//控制本趟的排序
		{
			if (Date[j]<Date[j-1])
			{
				flag = 1;
				T t = Date[j];
				Date[j] = Date[j - 1];
				Date[j - 1] = t;
			}
		}
		if (flag==0)//如果某一趟未发生交换，则返回
		{
			return;
		}
	}
}
template<class T>
void ShellSort(T Date[], int n)//希尔排序
{
	int d = n / 2;
	while (d>=1)
	{
		for (int k = 0; k < d; k++)//遍历所有的子序列
		{
			for (int i = k+d; i < n; i+=d)//对每个子序列执行直接插入操作
			{
				T temp = Date[i];
				int j = i - d;
				while (j>=k&&Date[j]>temp)//内部类似于直接插入排序
				{
					Date[j + d] = Date[j];
					j -= d;
				}
				Date[j + d] = temp;
			}
		}
		d = d / 2;
	}
}
template<class T>
int Partition1(T Date[], int start, int end)
{
	T prev = Date[start];
	int left = start+1;
	right = end;
	while (left<=righth)
	{
		while (left <= right&&Date[left] <= prev)
			left++;
		while (left<=right&&Date[right]>=prev)
		{
			right--;
		}
		if (left < right)
		{
			T temp = Date[left];
			Date[left] = Date[right];
			Date[right] = temp;
			left++;
			right--;
		}
	}
	T temp = Date[start];
	Date[start] = Date[right];
	Date[right] = temp;
	return right;
}
template<class T>
int Partition2(T Date[],int start, int end)
{
	T prev = Date[start];
	int left = start, right = end;
	while (left<right)
	{
		while (left < right&&Date[right] >= prev)//先动right指针，在动left指针
			right--;
		Date[left] = Date[right];
		while (left<right&&Date[left]<=prev)
		{
			left++;
		}
		Date[right] = Date[left];
	}
	Date[left] = prev;
	return left;//返回轴的位置，实现分治
}
template<class T>
void QuickSort(T Date[], int left, int right)//快速排序
{
	if (right <= left)
		return;
	else
	{
		int p = Partition2(Date,left,right);
		QuickSort(Date,left,p-1);
		QuickSort(Date,p+1,right);
	}
}
template<class T>
void SelectionSort(T Date[], int n)//简单选择有序排序
{
	int mark = -1;//记录要交换的值
	for (int i = 0; i < n - 1;i++)
	{
		mark = i;
		for (int j = i; j < n-1; j++)
		{
			if (Date[j + 1] < Date[mark])
				mark = j + 1;
		}
		if (mark!=i)
		{
			T temp = Date[i];
			Date[i] = Date[mark];
			Date[mark] = temp;
		}
	}
}
template<class T>
void Merge(T Date[], int left, int mid, int right)//归并排序的合并操作
{
	int len1 = mid - left + 1;
	int len2 = right - mid;
	T * Left = new T[len1];
	T * Right = new T[len2];
	for (int i = 0; i < len1; i++)
	{
		Left[i] = Date[i+left];
	}
	for (int j = 0; j < len2; j++)
	{
		Right[j] = Date[j+mid+1];
	}
	int l = 0;
	int r = 0;//记录两个数组的位置
	int i = -1;
	for (i = left; i < right; i++)//选择较小的数放在序列的前面
	{
		if (l == len1 || r == len2)
			break;
		if (Left[l] <= Right[r])
		{
			Date[i] = Left[l++];

		}
		else
			Date[i] = Right[r++];
	}
	while (l<len1)
	{
		Date[i++] = Left[l++];
	}
	while (r<len2)
	{
		Date[i++] = Right[r++];
	}
	delete[] Left;
	delete[] Right;
}
template<class T>
void MergeSort(T Date[], int start, int end)
{
	if (start >= end)
		return;
	else
	{
		int mid = (start + end) / 2;
		MergeSort(Date,start,mid);
		MergeSort(Date, mid + 1,end);
		Merge(Date,start,mid,end);
	}
}
void main()
{
	int b[6] = {32,18,65,48,27,18};
	InsertionSort<int>(b,6);
	cout << "输出直接插入排序的结果" << endl;
	for (int i = 0; i < 6; i++)
	{
		cout << b[i] << " ";
	}
	cout << endl;
	int c[7] = {4,6,7,7,9,5,2};
	BinaryInsertionSort<int>(c,7);
	cout << "输出折半插入排序结果" << endl;
	for (int i = 0; i < 7; i++)
	{
		cout << c[i] << " ";
	}
	cout << endl;
	int d[6] = {10,5,7,8,6,7};
	BubbleSort<int>(d, 6);
	cout << "输出冒泡排序的结果" << endl;
	for (int i = 0; i < 6; i++)
	{
		cout << d[i] << " ";
	}
	cout << endl;
	int a[12] = {56,34,25,87,12,38,56,46,14,77,92,25};
	ShellSort<int>(a, 12);
	cout << "输出希尔排序的结果" << endl;
	for (int i = 0; i < 12; i++)
	{
		cout << a[i] << " ";
	}
	cout << endl;
	int e[8] = {45,32,61,98,74,17,17,53};
	QuickSort<int>(e,0,7);
	cout << "输出快速排序的结果" << endl;
	for (int i = 0; i < 8; i++)
	{
		cout << e[i] << " ";
	}
	cout << endl;
	int f[8] = { 45, 32, 61, 98, 74, 17, 17, 53 };
	SelectionSort<int>(f,8);
	cout << "输出简单选择排序的结果" << endl;
	for (int i = 0; i < 8; i++)
	{
		cout << f[i] << " ";
	}
	cout << endl;
	int h[8] = {8,4,5,6,7,1,7,2};
	MergeSort(h,0,7);
	cout << "输出归并排序的结果" << endl;
	for (int i = 0; i < 8; i++)
	{
		cout << h[i] << " ";
	}
	cout << endl;
	system("pause");
}